# ---------------------------------------------------------------------------

# 1.py

# Created on: 星期日 一月 10 2018 11:02:13 上午

#   (generated by ArcGIS/ModelBuilder)

# Usage: 矢量图批量切割， by 闫磊 4个参数

# 原始数据 是图层，可以多选

# 切割工具是是接幅表 或者行政

# 字段是输出mdb名称

# 输出路径

# ---------------------------------------------------------------------------

# Create Geoprocessing Object

import  sys, os, string

import arcpy

from arcpy import env

defaultencoding = 'utf-8'

if sys.getdefaultencoding() != defaultencoding:

    reload(sys)

    sys.setdefaultencoding(defaultencoding)





arcpy.env.overwriteOutput = True



inworkspace  = arcpy.GetParameterAsText(0)

arcpy.AddMessage("输入数据="+inworkspace)

clipshp  = arcpy.GetParameterAsText(1)

arcpy.AddMessage("裁剪=clipshp"+clipshp)

fieldname= arcpy.GetParameterAsText(2)

arcpy.AddMessage("字段=fieldname"+fieldname)

outworkspace  = arcpy.GetParameterAsText(3)

arcpy.AddMessage("输出="+outworkspace)

mdbbool  = arcpy.GetParameterAsText(4)

arcpy.AddMessage("是否mdb="+mdbbool)



desc = arcpy.Describe(clipshp)

filepath=desc.CatalogPath

p=filepath.find(".mdb")



ftype="String"

for field in desc.fields:

    if field.Name ==fieldname:

        ftype=field.Type

        break

arcpy.AddMessage(u"默认地理数据库:"+arcpy.env.scratchWorkspace)

jfb_Select=arcpy.env.scratchWorkspace+"\yl999"#不能c:\要c:\\或者 c:/





rows = arcpy.SearchCursor(clipshp)

#arcpy.AddMessage(u"5=执行到这里")

row = rows.next()

#arcpy.AddMessage(u"6=执行到这里")

while row:

    #arcpy.AddMessage(u"7=执行到这里")

    fieldvalue =""+ str(row.getValue(fieldname))

    #arcpy.AddMessage(u"值fieldvalue="+fieldvalue)

    if p>0: #mdb

        Expression="["+fieldname +"]="

    else:

        Expression="\""+fieldname +"\"="

    #arcpy.AddMessage(u"表达式Expression1="+Expression)  

    if ftype=="String":

        Expression=Expression+"'"+fieldvalue+"'"

    else:

        Expression=Expression+fieldvalue

           

    #arcpy.AddMessage(u"Expression2="+Expression)

    arcpy.Select_analysis(clipshp, jfb_Select,Expression)

    #arcpy.AddMessage(u"6=clipshp"+clipshp)

    out_mdb=""

    #arcpy.AddMessage("======================================================out_mdb"+out_mdb)

    if mdbbool=="true":

        out_mdb=outworkspace + "\\"+fieldvalue+".mdb"  #os.path.basename(dataset)    

    else:

        out_mdb=outworkspace + "\\"+fieldvalue+".gdb"

    arcpy.AddMessage(u"out_mdb"+out_mdb)

    if not arcpy.Exists(out_mdb):

        if mdbbool=="true":

            arcpy.CreatePersonalGDB_management(os.path.dirname(out_mdb),os.path.basename(out_mdb))

        else:

            arcpy.CreateFileGDB_management(os.path.dirname(out_mdb),os.path.basename(out_mdb))

        

    mydatasets= string.split(inworkspace,";")



    for dataset in mydatasets:

       

        try:

            mylayer=os.path.basename(dataset)

            arcpy.AddMessage(u"clip:"+dataset+" to "+out_mdb+"\\"+ mylayer)

            mylayer=mylayer.replace("(","")

            mylayer=mylayer.replace(")","")

            arcpy.Clip_analysis(dataset, jfb_Select,out_mdb+"\\"+ mylayer, "")

        except Exception, ErrorDesc:

                #If an error set output boolean parameter "Error" to True.

            arcpy.AddError(str(ErrorDesc))

    row = rows.next()

if arcpy.Exists(jfb_Select):

    arcpy.Delete_management(jfb_Select)